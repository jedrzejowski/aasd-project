declare module "dat-swarm-defaults" {
    import {Options} from "discovery-swarm";

    const dat_swarm_defaults: {
        (opts: Options): Options;
    }

    export = dat_swarm_defaults;
}

declare module "discovery-swarm" {
    import {Socket} from "net";

    type Key = string | Buffer;

    export interface Options {
        id?: Key;
        stream?: unknown
        connect?: unknown
        utp?: boolean,
        tcp?: boolean,
        maxConnections?: number,
        whitelist?: string[],
        keepExistingConnections?: boolean
    }

    export interface SwarmPeer {
        channel: Buffer;
        host: string;
        port: number;
        id: string;
        retries: number;
    }

    export interface SwarmInfo {
        type: string;
        initiator: boolean;
        channel: Buffer;
        host: string;
        port: number;
        id: Buffer;
    }

    export interface Swarm {
        join(key: Key, options?: { announce?: boolean }, callback?: () => any): void;

        leave(key: Key): void;

        readonly connecting: number;
        readonly queued: number;
        readonly connected: number;

        on(event: "peer", cb: (peer: SwarmPeer) => void): void;

        on(event: "peer-banned", cb: (peerAddress: string, details: { reason: string }) => void): void;

        on(event: "peer-rejected", cb: (peerAddress: string, details: { reason: string }) => void): void;

        on(event: "drop", cb: (peer: SwarmPeer) => void): void;

        on(event: "connecting", cb: (peer: SwarmPeer) => void): void;

        on(event: "connecting-failed", cb: (peer: SwarmPeer, details: { timedout: boolean }) => void): void;

        on(event: "handshaking", cb: (connection: Socket, info: SwarmInfo) => void): void;

        on(event: "handshaking-timeout", cb: (connection: Socket, info: SwarmInfo) => void): void;

        on(event: "connection", cb: (connection: Socket, info: SwarmInfo) => void): void;

        on(event: "connection-closed", cb: (connection: Socket, info: SwarmInfo) => void): void;

        on(event: "redundant-connection", cb: (connection: Socket, info: SwarmInfo) => void): void;

        listen(port: number): void;
    }

    function swarm(options: Options): Swarm;

    export default swarm;
}